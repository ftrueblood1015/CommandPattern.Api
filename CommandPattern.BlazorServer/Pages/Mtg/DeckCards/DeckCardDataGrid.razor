@using CommandPattern.BlazorServer.Services.Mtg.DeckCards
@using CommandPattern.Domain.Entities.Mtg;
@using CommandPattern.BlazorServer.Shared.Components;

<MudPaper Class="pa-4">
    <MudText @attributes='Splats.PageHeader("DeckCardSummary")'>Card Summary</MudText>
    <MudDataGrid @attributes='Splats.DataGrid("DeckCardSummary")' T="DeckCard" MultiSelection="true" Items="DeckCards" SortMode="SortMode.Multiple"
                    Filterable="true">
        <ToolBarContent>
            <MudForm @ref="Form" @bind-IsValid="@success">
                <MudGrid>
                    <MudItem>
                        <EntityBaseSelect TEntity="Card" Title="Card" BoundValue="DeckCard!.CardId" HandleChange="DeckCardChange" DispalyFormat="Name"></EntityBaseSelect>
                    </MudItem>
                    <MudItem>
                        <MudNumericField @bind-Value="@DeckCard!.Quantity" @attributes='Splats.NumericRequired("Quantity")' />
                    </MudItem>
                    <MudItem>
                        <MudButton @attributes="Splats.NewButton()" OnClick="@(() => SaveDeckCard(DeckCard!))">Add</MudButton>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Card!.Name" Title="Name" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.Quantity" Title="Quantity" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudStack Row>
                    <MudButton @attributes="Splats.DeleteButton()" Size="@Size.Small" OnClick="@(() => RemoveDeckCard(context.Item))">Remove</MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="DeckCard" />
        </PagerContent>
    </MudDataGrid>
</MudPaper>

@code {
    [Inject]
    private IDeckCardService? DeckCardService { get; set; }

    [Inject]
    private ISnackbar? SnackbarService { get; set; }

    [Parameter]
    public long DeckId { get; set; }

    [Parameter]
    public EventCallback<long> DeckIdChanged { get; set; }

    private List<DeckCard>? DeckCards { get; set; }

    public MudForm? Form;

    public DeckCard? DeckCard { get; set; } = new DeckCard();

    public bool success;

    protected override async Task OnParametersSetAsync()
    {
        await GetDeckCards();
    }

    private async Task GetDeckCards()
    {
        if (DeckCardService == null)
        {
            throw new ArgumentNullException(nameof(DeckCardService));
        }

        var Response = await DeckCardService.GetAllEntitiesFiltered(DeckId);
        DeckCards = Response != null ? Response.ToList() : new List<DeckCard>();
    }

    public async Task DeckCardChange(long? Id)
    {
        DeckCard!.CardId = (long)Id!;
    }

    private async void SaveDeckCard(DeckCard Entity)
    {
        try
        {
            // add what is needed to deck card and create it
            Entity.IsActive = true;
            Entity.Name = "Card";
            Entity.DeckId = DeckId;
            await DeckCardService!.InsertEntity(Entity);

            success = true;
            ShowSnackbarMessage($"Added New {Entity.Name}", MudBlazor.Color.Success);

            // reset form and deck card
            await Form!.ResetAsync();
            DeckCard = new DeckCard() { CardId = 0 };

            // refresh deck card data grid
            await GetDeckCards();
            StateHasChanged();
        }
        catch
        {
            success = false;
            ShowSnackbarMessage($"Could Not Add {Entity.Name}", MudBlazor.Color.Error);
        }
    }

    private async Task<bool> RemoveDeckCard(DeckCard Item)
    {
        if (DeckCardService == null)
        {
            throw new Exception($"{nameof(DeckCardService)} is null!");
        }

        try
        {
            var result = await DeckCardService.DeleteEntity(Item.Id);

            if (result)
            {
                ShowSnackbarMessage($"Deleted {Item.Name}", MudBlazor.Color.Success);
                await GetDeckCards();
            }
            else
            {
                ShowSnackbarMessage($"Could Not Delete {Item.Name}", MudBlazor.Color.Error);
            }

            return result;
        }
        catch (Exception ex)
        {
            ShowSnackbarMessage($"Could Not Delete {Item.Name}: {ex}", MudBlazor.Color.Error);
            return false;
        }
    }

    public void ShowSnackbarMessage(string Message, MudBlazor.Color Color)
    {
        if (SnackbarService == null)
        {
            throw new ArgumentNullException(nameof(SnackbarService));
        }

        SnackbarService.Add<MudChip>(new Dictionary<string, object>() {
                { "Text", $"{Message}" },
                { "Color", Color }
            });
    }

}
