@using CommandPattern.BlazorServer.Services;
@using CommandPattern.Domain.Entities;
@typeparam T where T : EntityBase;

<MudSelect @attributes="Splats.SelectRequired(Title!)" T="long?" Label="@Title" ValueChanged="value => EntityValueChanged(value)" Value="@BoundValue">
    @if (Entities != null)
    {
        @foreach (var entity in Entities)
        {
            <MudSelectItem T="long?" Value="@entity.Id">@entity.Description</MudSelectItem>
        }
    }
</MudSelect>

@code {
    [Inject]
    private IServiceBase<T>? Service { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public long? BoundValue { get; set; }

    [Parameter]
    public EventCallback<long?> HandleChange { get; set; }

    public List<T>? Entities { get; set; }

    protected override async Task OnInitializedAsync()
    {
        GetData();
    }

    public async void GetData()
    {
        if (Service == null)
        {
            throw new Exception($"{nameof(Service)}  is null!");
        }
        var Response = await Service.GetAllEntities();
        Entities = Response != null ? Response.ToList() : new List<T>();
        StateHasChanged();
    }

    public void EntityValueChanged(long? value)
    {
        HandleChange.InvokeAsync(value);
    }
}
